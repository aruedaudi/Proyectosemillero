VISTAS SQL

CREATE USER ALBA_CACAO IDENTIFIED BY ALBA_CACAO;
GRANT DBA TO ALBA_CACAO;
CONNECT ALBA_CACAO/ALBA_CACAO;

CREATE OR REPLACE VIEW reporte_inventario AS
SELECT 
    i.id_inventario AS ID,
    pr.descripcion AS Producto,
    pd.cantidad AS Cantidad,
    pr.peso AS Peso,
    pr.estado_cacao AS Estado,
    pr.humedad AS Humedad,
    b.movimiento AS "Ultimo Mov",
    pd.fecha_entrega AS "Fecha Mov",
    pv.nombre AS Proveedor
FROM inventario i
JOIN pedido pd ON i.id_pedido = pd.id_pedido
JOIN producto pr ON pd.id_producto = pr.id_producto
JOIN proveedor pv ON pd.id_proveedor = pv.id_proveedor
JOIN bodega b ON i.id_inventario = b.id_inventario
WHERE pd.recibido = 'S';


CREATE OR REPLACE VIEW inventario_resumido AS
SELECT 
    pr.descripcion AS Producto,
    SUM(pd.cantidad) AS Cantidad,
    pr.estado_cacao AS Estado,
    pr.humedad AS Humedad
FROM inventario i
JOIN pedido pd ON i.id_pedido = pd.id_pedido
JOIN producto pr ON pd.id_producto = pr.id_producto
WHERE pd.recibido = 'S'
GROUP BY pr.descripcion, pr.estado_cacao, pr.humedad;
/


CREATE OR REPLACE VIEW movimientos_inventario AS
SELECT 
    i.id_inventario AS ID,
    pr.descripcion AS Producto,
    b.movimiento AS Tipo_mov,
    pd.cantidad AS Cantidad,
    pd.fecha_entrega AS Fecha
FROM inventario i
JOIN pedido pd ON i.id_pedido = pd.id_pedido
JOIN producto pr ON pd.id_producto = pr.id_producto
JOIN bodega b ON i.id_inventario = b.id_inventario
ORDER BY pd.fecha_entrega DESC;
/


CREATE OR REPLACE VIEW pedidos_resumidos AS
SELECT 
    pd.id_pedido AS "ID pedido",
    pv.nombre AS Proveedor,
    pd.fecha_entrega AS "Fecha entr",
    CASE 
        WHEN pd.recibido = 'S' THEN 'Recibido'
        ELSE 'Pendiente'
    END AS Estado
FROM pedido pd
JOIN proveedor pv ON pd.id_proveedor = pv.id_proveedor
ORDER BY pd.fecha_entrega DESC;
/


CREATE OR REPLACE VIEW vista_pedido AS
SELECT 
    id_pedido,
    id_proveedor,
    id_producto,
    fecha_entrega AS fecha_entrada,
    cantidad,
    fecha_creacion,
    recibido,
    observaciones
FROM pedido;
/


CREATE OR REPLACE TRIGGER trg_vista_pedido_insert
INSTEAD OF INSERT ON vista_pedido
FOR EACH ROW
BEGIN
    INSERT INTO pedido (
        id_pedido,
        id_proveedor,
        id_producto,
        fecha_entrega,
        cantidad,
        fecha_creacion,
        recibido,
        observaciones
    ) VALUES (
        :NEW.id_pedido,
        :NEW.id_proveedor,
        :NEW.id_producto,
        :NEW.fecha_entrada,
        :NEW.cantidad,
        :NEW.fecha_creacion,
        :NEW.recibido,
        :NEW.observaciones
    );
END;
/


CREATE SEQUENCE pedido_seq
START WITH 11
INCREMENT BY 1
NOCACHE;

CREATE SEQUENCE inventario_seq
START WITH 11
INCREMENT BY 1;

CREATE SEQUENCE proveedor_seq
START WITH 6
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE OR REPLACE TRIGGER trg_proveedor_before_insert
BEFORE INSERT ON proveedor
FOR EACH ROW
DECLARE
    v_next_id NUMBER;
BEGIN
    -- Obtener el siguiente valor de la secuencia
    SELECT proveedor_seq.NEXTVAL INTO v_next_id FROM dual;

    -- Asignar el ID automáticamente
    :NEW.id_proveedor := v_next_id;

    -- Asignar 'S' por defecto al campo ACTIVO
    :NEW.activo := 'S';
END;
/

CREATE OR REPLACE TRIGGER trg_insert_pedido_inventario
AFTER INSERT ON pedido
FOR EACH ROW
WHEN (NEW.recibido = 'S')
BEGIN
    INSERT INTO inventario (id_inventario, id_pedido)
    VALUES (inventario_seq.NEXTVAL, :NEW.id_pedido);
END;
/

CREATE OR REPLACE TRIGGER trg_update_pedido_inventario
AFTER UPDATE OF recibido ON pedido
FOR EACH ROW
WHEN (NEW.recibido = 'S' AND OLD.recibido <> 'S')
BEGIN
    INSERT INTO inventario (id_inventario, id_pedido)
    VALUES (inventario_seq.NEXTVAL, :NEW.id_pedido);
END;
/

CREATE OR REPLACE TRIGGER trg_inventario_bodega
AFTER INSERT ON inventario
FOR EACH ROW
DECLARE
    v_id_bodega NUMBER;
    v_existe NUMBER;
BEGIN
    -- Verifica si ya existe un registro con el mismo id_inventario
    SELECT COUNT(*) INTO v_existe
    FROM bodega
    WHERE id_inventario = :NEW.id_inventario;

    -- Si no existe, se inserta automáticamente
    IF v_existe = 0 THEN
        -- Generamos el nuevo ID_BODEGA
        SELECT NVL(MAX(id_bodega), 0) + 1 INTO v_id_bodega FROM bodega;

        -- Insertamos en la tabla bodega
        INSERT INTO bodega (id_bodega, id_inventario, lugar, movimiento)
        VALUES (v_id_bodega, :NEW.id_inventario, 'Bodega Norte', 'Entrada');
    END IF;
END;
/

ALTER TABLE bodega
DROP CONSTRAINT fk_bodega_inventario;

ALTER TABLE bodega
ADD CONSTRAINT fk_bodega_inventario
FOREIGN KEY (id_inventario)
REFERENCES inventario(id_inventario)
ON DELETE CASCADE;





